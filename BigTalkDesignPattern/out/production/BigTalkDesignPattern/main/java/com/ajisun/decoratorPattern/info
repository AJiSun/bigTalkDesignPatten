Component 是定义一个对象接口，可以给这些对象动态的添加职责。
ConcreteComponent 是定义了一个具体的对象，也可以给这个对象添加一些职责。
Decorator 装饰抽象类，继承了Component,从外类来扩展Component类的功能，但对于Component来说，是无需知道Decorator 的存在的
至于ConcreteDecorator 就是具体的装饰对象，起到给Component添加职责的功能

总结：
    当系统需要新功能的时候，是向旧的类中添加新的代码，这些代码通常装饰了原有类的核心职责和主要行为。
    在主类中加入新的字段，新的方法和新的逻辑，从而增加了主类的复杂度，而这些新加入的东西仅仅是为了满足一些只在某种特定情况下才会执行的
特殊行为的需要。而装饰模式却提供一个非常好的解决方案，它把他让每个要装饰的功能放在单独的类中，并让这个类包装它所要装饰的对象，
因此，当需要执行特殊行为时，客户端代码就可以根据需要有选择的按顺序的使用装饰功能包装对象了。

    优点：
        把类中的装饰功能从类中搬移出去，这样可以简化原有的类，有效的把类的核心职责和装饰功能区分开，而且可以去除相关类中重复的装饰逻辑。