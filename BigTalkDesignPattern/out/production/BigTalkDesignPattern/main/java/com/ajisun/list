1. 简单工厂模式
            ：利用封装，继承，多态，以及简单工厂模式 使代码可维护，可服用，可扩展，灵活性好
2. 策略模式
            ：定义算法家族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化不会影响到使用算法的客户
3. 单一职责原则
            ：就一个类而言，应该仅有一个引起它变化的原因
4. 开放-关闭原则
            ：是说软体实体（类，模块，函数等）应该可以扩展，但是不可以修改。
5. 依赖倒转原则
            ：高层模块不应该依赖底层模块。两个都应该依赖抽象
            ：抽象不应该依赖细节。细节应该依赖抽象
    5.1 里氏代换原则
                ：子类型必须能够替换掉它们的父类型。
                    一个软件实体如果能够使用父类的话，那么一定适用于其子类，而且它察觉不出父类对象和子类对象的区别。也就是说，在软件实体里面，
                    把父类都替换成它的子类，程序行为没有变化。
6. 装饰模式
         ：动态的给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更加灵活